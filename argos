#!/bin/bash

function argos_host_ip {
	local host_ip

	host_ip=`echo $DOCKER_HOST | awk -F/ '{print $3}' | awk -F: '{print $1}'`

	if [ "$host_ip" = "" ]
	then
		# If Linux? Does the $DOCKER_HOST variable exist in Linux.
		echo "127.0.0.1"
	fi

	echo $host_ip
}

# 1. Add line in docker-compose.yml
# 2. Add nginx/nginx/sites/SITENAME.conf (create template)
# 3. Add VOLUME in filesdata/Dockerfile
# 4. Create database ?
# 5. Run docker-compose build && docker-compose up -d
function add_site {
	local i
	local tempfile

	if [ $# -eq 0 ] || [ $# -gt 4 ]; then
		exit;
	else
		local site=$1
		local path=$2
		local cms=$3
	fi

	local file='./docker-compose.yml'

	############# 1. modifying docker-compose.yml ###############

	for i in `grep -in '/var/www/html/' $file | awk -F: '{print $1}' | sort -nr`
	do
		tempfile=$(mktemp /tmp/argos_docker_compose.XXXXXXXXXX)
		cat $file | awk "{
			if (NR == ($i+1) ) {
				print \"   - $path:/var/www/html/$site\"
			}
		}7" > $tempfile
		rm $file && mv $tempfile $file
	done

	############# 2. Add nginx/nginx/sites/SITENAME.conf ###############

	cp ./web/nginx/sites/default ./web/nginx/sites/$site.conf
	sed -i .txt "s/__SITE_NAME__/$site/" ./web/nginx/sites/$site.conf

	# Stupid OSX sed command won\'t work without giving an extension to the -i parameter.
	# Need to manually remove the backup file it creates.
	rm ./web/nginx/sites/$site.conf.txt

	############# 3. Add VOLUME in filesdata/Dockerfile ###############

	if [ "$cms" = "wordpress" ]
	then
		local VOLUME="VOLUME /var/www/html/$site/wp-content/uploads"
	else
		local VOLUME="VOLUME /var/www/html/$site/sites/default/files"
	fi

	file='./filesdata/Dockerfile'
	i=''
	for i in `grep -in '/var/www/html/' $file | awk -F: '{print $1}' | sort -nr`
	do
		tempfile=$(mktemp /tmp/argos_docker_compose.XXXXXXXXXX)
		cat $file | awk "{
			if (NR == ($i+1) ) {
				print \"$VOLUME\"
			}
		}7" > $tempfile
		rm $file && mv $tempfile $file
		break
	done

	############# 4. Create database ###############

	local database
	echo -n "Do you wish to create the database as well (the mysql container needs to be running)? [Y/n]: "
	read database

	while [ 1 ]
	do
		case $database in
			Y|y) 
				read -p "Please enter the database name: " database
				mysql -u root -proot -h $(argos_host_ip) -e "CREATE DATABASE $database"
				break ;;
			N|n) 
				# Continuing the process. 
				break ;;
			*) 
				echo -n "Option not recognized. Do you wish to create the database as well (mysql needs to be running)? [Y/n]: " 
				read database ;;
		esac
	done

	############## 5. Run docker-compose build && docker-compose up -d ##############

	docker-compose stop && docker-compose build && docker-compose up -d

	echo
	echo "=============================================================================="
	echo
	echo "The site $site was added successfully."
	echo
	echo "You can now add the line below to your local hosts file (usually /etc/hosts):"
	echo $site $(argos_host_ip)
	echo
	echo "Site url: http://$site/"
	echo
	echo "MySQL credentials:"
	echo "Host: $(argos_host_ip)"
	echo "User: root"
	echo "Password: root"
	echo "Port: 3306"
	echo
	echo "Redis credentials:"
	echo "Host: $(argos_host_ip)"
	echo "Port: 6379"
	echo "redis-cli -h $(argos_host_ip) -p 6379"
	echo
	echo "For connecting to any container through SSH use the command below:"
	echo "docker exec -it CONTAINER_NAME /bin/bash"
	echo
	echo

	docker-compose ps
	
}

# 1. Confirmation
# 2. Delete database ?
# 3. Stop containers docker-compose stop
# 4. Remove line in docker-compose.yml
# 5. Remove nginx/nginx/sites/SITENAME.conf
# 6. Remove line VOLUME in filesdata/Dockerfile
# 7. Rebuild && restart docker-compose
function delete_site {
	if [ $# -eq 0 ] || [ $# -gt 2 ]; then
		exit;
	else
		local site=$1
	fi

	############# 1. Confirmation ###############
	local confirm
	echo -n "Do you wish to delete the site $site? [Y/n]: "
	read confirm

	while [ 1 ]
	do
		case $confirm in
			Y|y) 
				# Continuing the process. 
				break ;;
			N|n) 
				# Stopping the execution. 
				echo "Annulation confirmed. Nothing was done."
				exit 0
				break ;;
			*) 
				echo -n "Option not recognized. Do you wish to delete the site $site? [Y/n]: "
				read confirm ;;
		esac
	done

	############# 2. Delete database ###############
	local database
	echo -n "Do you wish to delete the database as well (a backup will be created automatically and the mysql container needs to be running)? [Y/n]: "
	read database

	while [ 1 ]
	do
		case $database in
			Y|y) 
				read -p "Please enter the database name: " database

				if [ ! -d "./db_backups/" ]; then
					mkdir ./db_backups/
				fi
				
				mysqldump -u root -proot -h $(argos_host_ip) $database > ./db_backups/$site.sql

				if [ $? -eq 0 ]; then
					echo "Saved a database copy in $(pwd)/db_backups/$site.sql"
				fi

				mysql -u root -proot -h $(argos_host_ip) -e "DROP DATABASE $database"
				
				break ;;
			N|n) 
				# Continuing the process. 
				break ;;
			*) 
				echo -n "Option not recognized. Do you wish to delete the database as well (mysql needs to be running)? [Y/n]: " 
				read database ;;
		esac
	done

	############# 3. Stoping containers ###############
	docker-compose stop

	############# 4. Remove line in docker-compose.yml ###############
	sed -i .txt "/\/var\/www\/html\/$site/d" ./docker-compose.yml
	echo
	echo "Removed reference from docker-compose.yml."

	# Stupid OSX sed command won\'t work without giving an extension to the -i parameter.
	# Need to manually remove the backup file it creates.
	rm ./docker-compose.yml.txt

	############## 5. Remove nginx/nginx/sites/SITENAME.conf ##############
	rm ./web/nginx/sites/$site.conf
	echo
	echo "Removed nginx configuration file."

	############## 6. Remove line VOLUME in filesdata/Dockerfile ###############
	sed -i .txt "/\/var\/www\/html\/$site/d" ./filesdata/Dockerfile
	echo
	echo "Removed volume container."

	# Stupid OSX sed command won\'t work without giving an extension to the -i parameter.
	# Need to manually remove the backup file it creates.
	rm ./filesdata/Dockerfile.txt

	############# 6. Rebuilding && restarting containers ###############
	echo
	echo "Relaunching the containers ..."

	# Sometimes this gets messed up.
	docker rm argos_nginx_1
	docker-compose build && docker-compose up -d

	echo
	echo "Site $site deleted."
}

# Reads through the yaml file for getting all the mounted sites in /var/www/html/*.
function list_sites {
	local site
	local site_name

	for site in `grep -i '/var/www/html/' ./docker-compose.yml | cut -d- -f2`
	do
		site_name=`echo $site | cut -d: -f2 | awk -F/ {'print $5'}`
		echo "$site_name ($site)"
	done
}

# Runs the initial configuration on the docker-compose.yml file.
function init {
	local host_ip=`argos_host_ip`
	local docker_compose_file

	sed -i .txt "s/__REDIS_HOST__/$host_ip/" ./docker-compose.yml
	rm ./docker-compose.yml.txt

	echo "Initialization complete. You can now use your environment."
}

# Decides wether to use the single/multi node setup. Once this is chosen a new docker-compose.yml file is created and initialized.
# This way we can just use the default docker-compose commands without worrying which compose file is the "active" one.
function argos_up {

	docker-compose stop

	if [ "$1" == "multinode" ]; then
		docker_compose_file="docker-compose-multinode.yml"
	else
		docker_compose_file="docker-compose-singlenode.yml"
	fi

	# Removing previous docker-compose files.
	if [ -f ./docker-compose.yml ]; then
	  rm ./docker-compose.yml
	fi

	# New compose file.
	cp $docker_compose_file docker-compose.yml

	# Initiate the file.
	init

	# Run it.
	docker-compose up -d
}

################################
##### Script starts here #######
################################

if [ $# -eq 0 ] || [ "$1" == "help" ]
then
	echo "Usage: ./argos command [site] [path] [cms]"
	echo
	echo "argos is a little site management utility that makes life easier for adding and removing sites."
	echo
	echo "Commands:"
	echo "    init                         Sets up the docker configuration (docker-compose.yml) to use the right ports and IP addresses." 
	echo "    add                          Adds a site."
	echo "      [sitename]                 - the name you wish your site to have."
	echo "      [path]                     - the path on your local machine (e.g. /Users/alex/work/pantheon/drupal8/)."
	echo "      [cms]                      - drupal or wordpress (defaults to drupal)."
	echo "    remove (alias rm)            Deletes a site."
	echo "      [sitename]                 - the name of the site you wish to delete." 
	echo "    site-list (alias sl, ps)     Lists all your available sites." 
	echo "    build                        Build or rebuild services." 
	echo "    start                        Start services."
	echo "    restart                      Restart services." 
	echo "    stop                         Stops services." 
	echo "    up                           Create and start containers."
	echo "      [singlenode|multinode]     - the configuration type (defaults to singlenode)."
	echo "    ps                           List containers." 
	echo "    help                         List all possible commands." 
	echo "    ssh                          Gets SSH accees into the container with the [container_name] name." 
	echo "      [container_name]           - the container to which you want SSH access" 
	exit 0
fi

case "$1" in
	add) 
		add_site $2 $3 $4 ;;
	remove|rm) 
		delete_site $2 ;;
	site-list|sl) 
		list_sites ;;
	init) 
		init ;;
	up) 
		argos_up $2 ;;
	start) 
		docker-compose start ;;
	restart) 
		docker-compose restart ;;
	stop) 
		docker-compose stop ;;
	build) 
		docker-compose build ;;
	ps) 
		docker-compose ps ;;
	ssh) 
		docker exec -it $2 /bin/bash ;;
	--) ;;
	*) echo "argos $1 is not a recognized option" ;;
esac


